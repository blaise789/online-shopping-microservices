server:
  port: 6500
spring:
  application:
    name: order-service
  kafka:
    bootstrap-servers: localhost:9092
    default-template-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: com.globalcoder.orderservice.event.OrderPlacedEvent
              trusted:
               packages: *


  zipkin:
    base-url: http://localhost:9411
  sleuth:
    integration:
      enabled: true
    sampler:
      probability: 1.0

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    url: jdbc:mysql://${MYSQL_HOST:localhost}:3306/order-service
    password: Blaise@123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: 'true'
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka:password@localhost:8761/eureka
  instance:
    hostname: localhost
management:
  health:
    circuitbreakers:
        enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
    health:
      show-details: always

#      resilience4j properties
resilience4j:
  circuitbreakers:
    instances:
      inventory:
        registerHealthIndicator: true
        event-consumer-buffer-size: 10
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
#        resilience4j timeout properties
  timelimiter:
    instances:
      inventory:
        timeout-duration: 3s

# resilience4j retry properties
  retry:
   instances:
     inventory:
      max-attempts: 3
      wait-duration: 5s
